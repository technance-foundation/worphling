---
description: 
globs: 
alwaysApply: false
---
# Worphling Testing Procedures

This document outlines standardized testing procedures for the Worphling translation tool features.

## Test Environment Setup

1. Always start testing from a clean state with the following structure:
   - A source language file (e.g., en.json)
   - At least 2-3 target language files (e.g., es.json, ru.json, fa.json)
   - Run tests from the playground directory: `/packages/playground`

2. Before each test:
   - Build the latest version of the tool: `cd ../worphling && npm run build`
   - Return to the playground directory: `cd ../playground`

## Core Feature Tests

### Test 1: Basic Translation (Missing Keys)

1. Add a new key to the source language file (en.json) that doesn't exist in target languages
2. Run: `node ../worphling/dist/index.js --source-file=locales/en.json --source-directory=./locales`
3. Verify that:
   - The tool reports "Found X missing translations"
   - All target language files now contain the new key with appropriate translations

### Test 2: Modified Key Detection

1. Change the value of an existing key in the source language file
2. Run: `node ../worphling/dist/index.js --source-file=locales/en.json --source-directory=./locales`
3. Verify that:
   - The tool reports "Found X modified keys that need retranslation"
   - Target language files have updated translations for the modified key
   - The .worphling-snapshot.json file is updated with the new source values

### Test 3: Sorting Functionality

1. Run: `node ../worphling/dist/index.js --source-file=locales/en.json --source-directory=./locales --with-sorting`
2. Verify that:
   - All JSON files have their keys sorted alphabetically at every nesting level
   - If no keys needed translation, the tool should still report "Sorting all files as requested..."

### Test 4: Force Retranslation

1. Run: `node ../worphling/dist/index.js --source-file=locales/en.json --source-directory=./locales --force-retranslate-all`
2. Verify that:
   - The tool retranslates all keys in all target languages, regardless of missing/modified status
   - Target files are updated with new translations

### Test 5: Skip Modified Detection

1. Change a key in the source language file
2. Run: `node ../worphling/dist/index.js --source-file=locales/en.json --source-directory=./locales --skip-modified-detection`
3. Verify that:
   - The tool doesn't detect or report the modified key
   - Target files don't get updated for the modified key

### Test 6: Try Exact Length

1. Run: `node ../worphling/dist/index.js --source-file=locales/en.json --source-directory=./locales --try-exact-length`
2. Add or modify a key to force translation
3. Verify that:
   - Translated strings try to maintain similar length to source strings

## Test Documentation

For each test performed:

1. Document the starting state (what files were modified and how)
2. Document the exact command executed
3. Document the output of the command
4. Document the resulting state (how files changed)
5. Report success or failure status with explanation
6. If a test fails, document the expected behavior and actual behavior

## Regression Testing

When implementing new features or fixing bugs:

1. Run all relevant tests to ensure existing functionality works
2. Create a specific test for the new feature/bugfix
3. Document all test results in the playground-test-result.md file

## Results Reporting

Always document test results using the task-list format:
- Create/update playground-test-result.md following the task-list.mdc format
- Mark completed tests with [x]
- Note any failures or issues discovered
- Include details on what worked and what didn't
- Include command outputs for reference
